@use "sass:map";
@import "../var/_variables.scss";
@import "./_units.scss";

*{ box-sizing: border-box; }

html, body, main, header, footer, section{ 
    margin: 0;
    padding: 0;
}

.container{
    display: block;
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
    margin-left: auto;
    margin-right: auto;
}

@each $key, $value in $breakpoints{
    .container-#{$key}{ 
        @extend .container;
        max-width: $value;
    }
}

.col-fill{
    width: 0;
    flex-grow: 1;
}

// STUB Default col-x Styling
%col{
    --width: 100%;
    width: var(--width);
}

@each $key, $value in $breakpoints{
    @each $name, $width in $cols{
        .col-#{$key}-#{$name}{ 
            @extend %col
         }
    }
}

@each $name, $width in $cols{
    .col-#{$name}{
        --width: #{$width};
        width: var(--width); 
    }
}

@each $key, $value in $breakpoints{
    @media screen and ($minmax: $value){
        @each $name, $width in $cols{
            .col-#{$key}-#{$name}{ 
                --width: #{$width};
                width: var(--width); 
            }
        }
    }
}

.row{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    
    &.flex-col{ flex-direction: column;}

// STUB Gutter Styling
    @each $key, $value in $gutters-x{

        &.gx-#{$key},&.g-#{$key}{
            width: calc(100% - ($gutter * $value));
            margin-left: calc($gutter * $value);
            margin-right: 0;

                &.full{
                    width: calc(100% + ($gutter * $value));
                    margin-left: 0;
                    margin-right: calc($gutter * $value * -1);
                }

            column-gap: calc($value * $gutter); 
        }

        &.gy-#{$key},&.g-#{$key}{
            row-gap: calc($value * $gutter);
        }

        // NOTE
        // This is the logic for the col classes, combined together to save
        // space
        &.g-#{$key},&.gx-#{$key}{
            >div,article,aside,details,figcaption,figure,footer,header,main,mark,nav,section,summary,time{
                width: calc(var(--width) - ($value * $gutter));
            }
        }
    }

// STUB Gutter breakpoint logic

    @each $break, $screen in $breakpoints{
        @media screen and ($minmax: $screen){
            @each $key, $value in $gutters-x{
                &.gx-#{$break}-#{$key},&.g-#{$break}-#{$key}{
                    width: calc(100% - ($gutter * $value));
                    margin-left: calc($gutter * $value);
                    margin-right: 0;
        
                        &.full{
                            width: calc(100% + ($gutter * $value));
                            margin-left: 0;
                            margin-right: calc($gutter * $value * -1);
                        }
        
                    column-gap: calc($value * $gutter); 
                }
        
                &.gy-#{$break}-#{$key},&.g-#{$break}-#{$key}{
                    row-gap: calc($value * $gutter);
                }

                &.g-#{$break}-#{$key},&.gx-#{$break}-#{$key}{
                    >div,article,aside,details,figcaption,figure,footer,header,main,mark,nav,section,summary,time{
                        width: calc(var(--width) - ($value * $gutter));
                    }
                }
            }
        }
    }
}

.d-flex,.flex-row,.flex-col{ display: flex; }
.d-none{ display: none; }
.d-block{ display: block; }

.flex-row{
    flex-direction: row;
    .wrap{ flex-wrap: wrap; }
}
.flex-col{
    flex-direction: column;
    .wrap{ flex-wrap: wrap; }
}
.grow-1{ flex-grow: 1; }
.fill{ flex-grow: 1; }
.fill-x,.fill{ width: 100%; }
.fill-y,.fill{ height: 100%; }

@each $break, $screen in $breakpoints{
    @media screen and ($minmax: $screen){
        .d-#{$break}-none{ display: none; }
        .d-#{$break}-flex,.flex-#{$break}-row,.flex-#{$break}-col{ display: flex; }
        .d-#{$break}-block{ display: block; }
        .flex-#{$break}-row{
            flex-direction: row;
            .wrap{ flex-wrap: wrap; }
        }
        .flex-#{$break}-col{
            flex-direction: column;
            .wrap{ flex-wrap: wrap; }
        }
        .grow-#{$break}-1{ flex-grow: 1; }
        .fill-#{$break} { flex-grow: 1; }
        .fill-#{$break}-x,.fill-#{$break}{ width: 100%; }
        .fill-#{$break}-y,.fill-#{$break}{ height: 100%; }
    }
}

.align-start{
    align-items: flex-start;
    align-content: flex-start;
}
.align-center{
    align-items: center;
    align-content: center;
}
.align-end{
    align-items: flex-end;
    align-content: flex-end;
}
.align-between{
    align-content: space-between;
    align-items: space-between;
}
.align-around{
    align-content: space-around;
    align-items: space-around;
}
.align-even{
    align-content: space-evenly;
    align-items: space-evenly;
}
.justify-start{
    justify-content: flex-start;
    justify-items: flex-start;
}
.justify-center{
    justify-content: center;
    justify-items: center;
}
.justify-end{
    justify-content: flex-end;
    justify-items: flex-end;
}
.justify-between{
    justify-content: space-between;
    justify-items: space-between;
}
.justify-around{
    justify-content: space-around;
    justify-items: space-around;
}
.justify-even{
    justify-content: space-evenly;
    justify-items: space-evenly;
}

@each $key, $value in $breakpoints{
    @media screen and ($minmax: $value){
        .align-#{$key}-start{
            align-items: flex-start;
            align-content: flex-start;
        }
        .align-#{$key}-center{
            align-items: center;
            align-content: center;
        }
        .align-#{$key}-end{
            align-items: flex-end;
            align-content: flex-end;
        }
        .align-#{$key}-between{
            align-content: space-between;
            align-items: space-between;
        }
        .align-#{$key}-around{
            align-content: space-around;
            align-items: space-around;
        }
        .align-#{$key}-even{
            align-content: space-evenly;
            align-items: space-evenly;
        }
        .justify-#{$key}-start{
            justify-content: flex-start;
            justify-items: flex-start;
        }
        .justify-#{$key}-center{
            justify-content: center;
            justify-items: center;
        }
        .justify-#{$key}-end{
            justify-content: flex-end;
            justify-items: flex-end;
        }
        .justify-#{$key}-between{
            justify-content: space-between;
            justify-items: space-between;
        }
        .justify-#{$key}-around{
            justify-content: space-around;
            justify-items: space-around;
        }
        .justify-#{$key}-even{
            justify-content: space-evenly;
            justify-items: space-evenly;
        }
    }
}

// STUB Padding Logic
@each $key, $value in $paddings { 
    .p-#{$key} { padding: $value; }
    .pt-#{$key},.py-#{$key} { padding-top: $value; }
    .pb-#{$key},.py-#{$key} { padding-bottom: $value; }
    .ps-#{$key},.px-#{$key} { padding-left: $value; }
    .pe-#{$key},.px-#{$key} { padding-right: $value; }
}

// Breakpoint Logic
@each $break, $screen in $breakpoints {
    @media screen and ($minmax: $screen){
        @each $key, $value in $paddings { 
            .p-#{$break}-#{$key} { padding: $value; }
            .pt-#{$break}-#{$key},.py-#{$break}-#{$key} { padding-top: $value; }
            .pb-#{$break}-#{$key},.py-#{$break}-#{$key} { padding-bottom: $value; }
            .ps-#{$break}-#{$key},.px-#{$break}-#{$key} { padding-left: $value; }
            .pe-#{$break}-#{$key},.px-#{$break}-#{$key} { padding-right: $value; }
        }
    }
}

// STUB Begin Margins
@each $key, $value in $paddings { 
    .m-#{$key} { margin: $value; }
    .mt-#{$key},.my-#{$key} { margin-top: $value; }
    .mb-#{$key},.my-#{$key} { margin-bottom: $value; }
    .ms-#{$key},.mx-#{$key} { margin-left: $value; }
    .me-#{$key},.mx-#{$key} { margin-right: $value; }
}

// Breakpoint Logic
@each $break, $screen in $breakpoints {
    @media screen and ($minmax: $screen){
        @each $key, $value in $paddings { 
            .m-#{$break}-#{$key} { margin: $value; }
            .mt-#{$break}-#{$key},.my-#{$break}-#{$key} { margin-top: $value; }
            .mb-#{$break}-#{$key},.my-#{$break}-#{$key} { margin-bottom: $value; }
            .ms-#{$break}-#{$key},.mx-#{$break}-#{$key} { margin-left: $value; }
            .me-#{$break}-#{$key},.mx-#{$break}-#{$key} { margin-right: $value; }
        }
    }
}


// STUB Begin vh & vw

// standard screen variable styles
@each $key, $value in $cv { 
    .vh-#{$key} { 
        height: tie_vh($value);
    }
    .vw-#{$key} {
        width: tie_vw($value);
    }
}
// Breakpoint Logic
@each $break, $screen in $breakpoints {
    @media screen and ($minmax: $screen){
        @each $k2, $v2 in $cv { 
            .vh-#{$break}-#{$k2} { 
                height: tie_vh($v2);
            }
            .vw-#{$break}-#{$k2} { 
                width: tie_vw($v2);
            }
        }
    }
}

// STUB Other utility classes