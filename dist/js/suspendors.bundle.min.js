/*!
  * Bootstrap v1.6.4 (undefined)
  * Copyright 2011-2024 Auston Robertson <auston.robertson.business@gmail.com>
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!(function (e, t) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = t() : (typeof define === 'function' && define.amd ? define(t) : (e = typeof globalThis === 'undefined' ? e || self : globalThis).suspendors = t())
})(this, (() => {
  const e = { spacer: 0, minmax: null, prefix: null, xxs: 0, xs: 0, sm: 0, md: 0, lg: 0, xl: 0, xxl: 0, dev: !1, 'modal-transition-time': null }; function t(t, n) {
    if (e.dev) {
      console[t](`[${t}] :: ${(new Date()).toLocaleTimeString()} :: `, ...n)
    } else {
      switch (t) {
        case 'log': case 'assert': { return
        }
      }

      console[t](`[${t}] :: ${(new Date()).toLocaleTimeString()} :: `, ...n)
    }
  }

  const n = { log() {
    t('log', arguments)
  }, error() {
    t('error', arguments)
  }, warn() {
    t('warn', arguments)
  }, assert() {
    t('assert', arguments)
  }, trace() {
    t('trace', arguments)
  } }; const o = new Event('under'); const r = new Event('xxs'); const i = new Event('xs'); const s = new Event('sm'); const a = new Event('md'); const l = new Event('lg'); const d = new Event('xl'); const c = new Event('xxl'); const u = new Event('over'); const g = new Event('portrait'); const m = new Event('landscape'); let h = null; let w = null; let p = !1; function v(e, t) {
    w !== t && (w = t, p && window.dispatchEvent(e))
  }

  function f(e, t) {
    h !== t && (h = t, p && window.dispatchEvent(e))
  }

  const x = new class {
    setup() {
      n.log('Event Setter Logic Online'), document.addEventListener('DOMContentLoaded', x.loadFlip), window.addEventListener('resize', this.update), window.matchMedia('(orientation: portrait)').addEventListener('change', (() => {
        this.update()
      })), this.update()
    }

    loadFlip() {
      p || (p = !0, w = null, h = null, document.removeEventListener('DOMContentLoaded', x.loadFlip), x.update())
    }

    update() {
      const t = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; if (t > (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight) ? f(m, 'landscape') : f(g, 'portrait'), e.minmax === 'max-width') {
        switch (t) {
          case t < e.xxs: { v(r, 'xxs'); break
          }

          case t > e.xxs && t <= e.xs: { v(i, 'xs'); break
          }

          case t > e.xs && t <= e.sm: { v(s, 'sm'); break
          }

          case t > e.sm && t <= e.md: { v(a, 'md'); break
          }

          case t > e.md && t <= e.lg: { v(l, 'lg'); break
          }

          case t > e.lg && t <= e.xl: { v(d, 'xl'); break
          }

          case t > e.xl && t <= e.xxl: { v(c, 'xxl'); break
          }

          default: { v(u, 'over')
          }
        }
      } else {
        switch (t) {
          case t < e.xxs: { v(o, 'under'); break
          }

          case t > e.xxs && t <= e.xs: { v(r, 'xxs'); break
          }

          case t > e.xs && t <= e.sm: { v(i, 'xs'); break
          }

          case t > e.sm && t <= e.md: { v(s, 'sm'); break
          }

          case t > e.md && t <= e.lg: { v(a, 'md'); break
          }

          case t > e.lg && t <= e.xl: { v(l, 'lg'); break
          }

          case t > e.xl && t <= e.xxl: { v(d, 'xl'); break
          }

          default: { v(c, 'xxl')
          }
        }
      }
    }

    clearAllThenUpdate() {
      this.clearOrientThenUpdate(), this.clearScreenThenUpdate()
    }

    clearScreenThenUpdate() {
      w = null, h = null, this.update()
    }

    clearOrientThenUpdate() {
      w = null, h = null, this.update()
    }

    returnOrientation() {
      return h || this.update(), n.log('The current orientation is ', h), h
    }

    returnScreen() {
      return w || this.update(), n.log('The current screen is ', w), w
    }
  }(); let E = null; let b = null; const y = new class {
    setup() {
      n.log('Sizer Logic Online'), window.addEventListener('resize', this.update), window.matchMedia('(orientation: portrait)').addEventListener('change', (() => {
        this.update()
      }))
    }

    update() {
      const t = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; const n = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; if (n < b && t === E && t <= e.lg) {
        return
      }

      E = t, b = n; const o = document.querySelector(':root'); const { prefix: r } = e; o.style.setProperty(`--${r}vh100`, `${n}px`), o.style.setProperty(`--${r}vw100`, `${t}px`)
    }
  }(); const
    L = document.querySelector(':root'); function T(e) {
    const t = L == null ? null : getComputedStyle(L); return t === null ? null : t.getPropertyValue(e)
  }

  function k(e) {
    let t = ''; for (const n of e) {
      if (Number.isNaN(n) && n !== '.') {
        break
      }

      t += n
    }

    return Number(t)
  }

  const A = new class {
    importVariablesFromCss() {
      const t = Array.from(document.styleSheets).filter((e => e.href === null || e.href.startsWith(window.location.origin))).reduce(((e, t) => [...e, ...Array.from(t.cssRules).reduce(((e, t) => t.selectorText === ':root' ? [...e, ...Array.from(t.style).filter((e => e.startsWith('--')))] : e), [])]), []); n.log('the found root is: ', t); const o = T('--prefix'); e.prefix = o; for (const n of t) {
        const t = n.slice(2); const r = T(n); let i = null; r.length === 0 || t.length > 30 || t !== 'prefix' && t !== `${o}vh100` && t !== `${o}vw100` && t !== `${o}spacer` && t.includes(o) && (i = Number.isNaN(r[0]) ? r : k(r), e[`${t.slice(o.length)}`] = i)
      }

      const r = k(T(`--${o}spacer`)) * k(window.getComputedStyle(document.body).fontSize); e.spacer = r, n.log('The vars are now: ', e), document.removeEventListener('DOMContentLoaded', A.importVariablesFromCss)
    }

    dev() {
      e.dev = !0, n.log('set dev mode to true')
    }
  }(); document.addEventListener('DOMContentLoaded', A.importVariablesFromCss); const S = new class {
    constructor() {
      n.log('Suspendors Online'), y.setup(), x.setup()
    }

    triggerAll() {
      x.clearAllThenUpdate()
    }

    triggerOrientation() {
      x.clearOrientThenUpdate()
    }

    triggerScreen() {
      x.clearScreenThenUpdate()
    }

    returnScreen() {
      return x.returnScreen()
    }

    returnOrientation() {
      return x.returnOrientation()
    }

    returnVariables() {
      return e
    }

    dev() {
      A.dev()
    }
  }(); const C = []; const O = []; const F = []; const M = []; const $ = []; const D = []; const W = []; const N = []; const U = []; const
    B = new class {
      constructor() {
        n.log('Registrar Online'), window.addEventListener('under', (() => {
          this.trigger('under')
        }), !1), window.addEventListener('xxs', (() => {
          this.trigger('xxs')
        }), !1), window.addEventListener('xs', (() => {
          this.trigger('xs')
        }), !1), window.addEventListener('sm', (() => {
          this.trigger('sm')
        }), !1), window.addEventListener('md', (() => {
          this.trigger('md')
        }), !1), window.addEventListener('lg', (() => {
          this.trigger('lg')
        }), !1), window.addEventListener('xl', (() => {
          this.trigger('xl')
        }), !1), window.addEventListener('xxl', (() => {
          this.trigger('xxl')
        }), !1), window.addEventListener('over', (() => {
          this.trigger('over')
        }), !1), window.addEventListener('portrait', (() => {
          this.trigger('portrait')
        }), !1), window.addEventListener('landscape', (() => {
          this.trigger('landscape')
        }), !1)
      }

      trigger(e) {
        n.log(`Triggering ${e}`), e === 'under' ? this.runEvents(C) : (e === 'sm' ? this.runEvents(O) : e === 'md' ? this.runEvents(F) : e === 'lg' ? this.runEvents(M) : e === 'xl' ? this.runEvents($) : e === 'xxl' ? this.runEvents(D) : e === 'over' ? this.runEvents(W) : e === 'landscape' ? this.runEvents(N) : e === 'portrait' && this.runEvents(U))
      }

      runEvents(e) {
        if (!(e.length < 1)) {
          for (const t of e) {
            typeof t === 'function' && t()
          }
        }
      }

      setEventFlags(e, t) {
        if (typeof e === 'function') {
          if (n.log('valid function'), t === 'under') {
            return void C.push(e)
          }

          if (t === 'xxs') {
            return
          }

          if (t === 'xs') {
            return
          }

          if (t === 'sm') {
            return void O.push(e)
          }

          if (t === 'md') {
            return void F.push(e)
          }

          if (t === 'lg') {
            return void M.push(e)
          }

          if (t === 'xl') {
            return void $.push(e)
          }

          if (t === 'xxl') {
            return void D.push(e)
          }

          if (t === 'over') {
            return void W.push(e)
          }

          if (t === 'landscape') {
            return void N.push(e)
          }

          t === 'portrait' && U.push(e)
        } else {
          n.log('not a valid function')
        }
      }

      under(e) {
        n.log('registering function: ', e, ' at breakpoint under'), this.setEventFlags(e, 'under')
      }

      xxs(e) {
        n.log('registering function: ', e, ' at breakpoint sm'), this.setEventFlags(e, 'xxs')
      }

      xs(e) {
        n.log('registering function: ', e, ' at breakpoint sm'), this.setEventFlags(e, 'xs')
      }

      sm(e) {
        n.log('registering function: ', e, ' at breakpoint sm'), this.setEventFlags(e, 'sm')
      }

      md(e) {
        n.log('registering function: ', e, ' at breakpoint md'), this.setEventFlags(e, 'md')
      }

      lg(e) {
        n.log('registering function: ', e, ' at breakpoint lg'), this.setEventFlags(e, 'lg')
      }

      xl(e) {
        n.log('registering function: ', e, ' at breakpoint xl'), this.setEventFlags(e, 'xl')
      }

      xxl(e) {
        n.log('registering function: ', e, ' at breakpoint xxl'), this.setEventFlags(e, 'xxl')
      }

      over(e) {
        n.log('registering function: ', e, ' at breakpoint over'), this.setEventFlags(e, 'over')
      }

      landscape(e) {
        n.log('registering function: ', e, ' at orientation landscape'), this.setEventFlags(e, 'landscape')
      }

      portrait(e) {
        n.log('registering function: ', e, ' at orientation portrait'), this.setEventFlags(e, 'portrait')
      }
    }(); class H {
    constructor(t) {
      this.static = t.static || !1, this.scrollable = t.scrollable || !1, this.disableBodyScroll = t.disableBodyScroll || !0, this.centered = t.centered || !1, this.animation = t.animation || !0, this.transitionTime = t.transitionTime || e['modal-transition-time'] ? e['modal-transition-time'] : 1
    }
  } let I = null; let R = null; let V = {}; let X = !1; let Y = !1; function q(e) {
    e.key !== 'Escape' && e.keyCode !== 27 || (n.log('escape pressed'), Z())
  }

  function z(e) {
    if (!I || !R) {
      throw new Error('no modal target awaitOutClickCloseModal(e)')
    }

    if (!R.checkVisibility()) {
      return
    }

    const t = R.getBoundingClientRect(); (e.x < t.left || e.x > t.width + t.left || e.y < t.top || e.y > t.height + t.top) && Z()
  }

  function P(e) {
    if (!I || !R) {
      throw new Error('no modal target awaitOutTouchStartToCloseModal(e)')
    }

    const t = e.changedTouches[0].clientX; const n = e.changedTouches[0].clientY; const o = R.getBoundingClientRect(); (t < o.left + window.scrollX || t > o.left + window.scrollX + o.width || n < o.top + window.scrollY || n > o.top + window.scrollY + o.height) && R.addEventListener('touchend', j)
  }

  function j(e) {
    if (!I || !R) {
      throw new Error('no modal target awaitOutTouchEndToCloseModal(e)')
    }

    const t = e.changedTouches[0].clientX; const n = e.changedTouches[0].clientY; const o = R.getBoundingClientRect(); R.removeEventListener('touchend', j), (t < o.left + window.scrollX || t > o.left + window.scrollX + o.width || n < o.top + window.scrollY || n > o.top + window.scrollY + o.height) && Z()
  }

  function G(e = !0) {
    if (e) {
      const e = (function () {
        const e = document.createElement('div'); e.style.cssText = 'overflow:scroll; visibility:hidden; position:absolute;', document.body.append(e); const t = e.offsetWidth - e.clientWidth; return e.remove(), t
      })(); document.body.classList.add('modal-open'), document.body.style.paddingRight = `${e}px`
    } else {
      document.body.classList.remove('modal-open'), document.body.style = ''
    }
  }

  function J(e = !0) {
    if (!I || !R) {
      throw new Error('no modal target toggleEventListenersToCloseModal(toggle = true)')
    }

    e ?
      (R.addEventListener('cancel', (e => {
        e.preventDefault()
      })), window.addEventListener('click', z), document.addEventListener('keydown', q), window.addEventListener('touchstart', P)) :
      (R.removeEventListener('cancel', (e => {
        e.preventDefault()
      })), window.removeEventListener('click', z), document.removeEventListener('keydown', q), window.removeEventListener('touchstart', P))
  }

  function K(e = !0, t) {
    if (!I || !R) {
      throw new Error('no modal target toggleOptionsAndAttributes(toggle = true, options)')
    }

    t || (t = new H(V)), e ? (t.centered && R.setAttribute('data-centered', ''), t.static && R.setAttribute('data-static', ''), t.scrollable && R.setAttribute('data-scrollable', ''), t.animation || R.setAttribute('data-no-animation', '')) : (t.centered && R.removeAttribute('data-centered', ''), t.static && R.removeAttribute('data-static', ''), t.scrollable && R.removeAttribute('data-scrollable', ''), t.animation || R.removeAttribute('data-no-animation', ''))
  }

  function Q() {
    if (!I || !R) {
      throw new Error('no modal target toggleOnEventListenersToCloseModal()')
    }

    R.removeEventListener('transitionend', Q), J(!0)
  }

  async function Z() {
    if (!I || !R) {
      throw new Error('no modal target closeModal()')
    }

    J(!1), R.addEventListener('transitionend', _), R.removeAttribute('data-modal-open'); const e = await ee(V); n.log('Modal Closed:', e)
  }

  function _() {
    R.removeEventListener('transitionend', _), R.style = '', J(!1), K(!1), R.close()
  }

  async function ee(e) {
    const t = e ? e.transitionTime + 50 : V.transitionTime + 50; return new Promise((e => {
      setTimeout((() => {
        e(!0)
      }), t)
    }))
  }

  const te = new class {
    async open(e = '', t = {}) {
      try {
        if (e === '') {
          throw new Error('No id provided')
        }

        if (Y) {
          return
        }

        Y = !0, I !== null && await this.close(I), (function (e, t) {
          V = new H(t), I = e, R = document?.getElementById(I)
        })(e, t), G(!0), await (async function (e, t) {
          if (!I || !R) {
            throw new Error('no modal target openModal(id, options)')
          }

          K(!0), (function () {
            if (!I || !R) {
              throw new Error('no modal target setFocus()')
            }

            let e = 0; Array.prototype.forEach.call(R.querySelectorAll('[autofocus]'), (() => {
              e++
            })), e === 0 && (n.log('no autofocus target provided, setting first child to autofocus.'), R.firstChild.setAttribute('autofocus', ''))
          })(), R.style.display = 'block', R.addEventListener('transitionend', Q), setTimeout((() => {
            R.setAttribute('data-modal-open', '')
          }), 1); const o = await ee(t); n.log('Modal Open:', o), R.showModal()
        })(0, t), Y = !1
      } catch (error) {
        n.log(error)
      }
    }

    async close() {
      try {
        if (I === null) {
          throw new Error('no modal to close')
        }

        if (X) {
          return
        }

        X = !0, await Z(), Y || G(!1), I = null, R = null, X = !1
      } catch (error) {
        n.error(error)
      }
    }

    async toggle(e = '', t = {}) {
      e === '' ? await this.close() : await (I === null || I !== e ? this.open(e, t) : this.close())
    }
  }(); const ne = new class {
    test() {
      n.log('Dev Mode confirmed - forms')
    }
  }(); const oe = new class {
    test() {
      n.log('Dev Mode confirmed - pop')
    }
  }(); const
    re = new class {
      loadAllImg() {
        Array.prototype.forEach.call(document.querySelectorAll('img[data-src]'), (e => {
          e.setAttribute('src', e.getAttribute('data-src')), e.addEventListener('load', (() => {
            e.removeAttribute('data-src')
          }))
        }))
      }

      loadAllImgInId(e) {
        Array.prototype.forEach.call(document.getElementById(e).querySelectorAll('img[data-src]'), (e => {
          e.setAttribute('src', e.getAttribute('data-src')), e.addEventListener('load', (() => {
            e.removeAttribute('data-src')
          }))
        }))
      }
    }(); return { suspendors: S, registrar: B, modal: te, forms: ne, pop: oe, options: A, loaders: re }
}))
// # sourceMappingURL=suspendors.bundle.min.js.map
