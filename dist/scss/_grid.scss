@use "sass:map";
@use 'sass:list';
@import "../var/_variables.scss";
@import "../var/_variable-maps.scss";
@import "./_units.scss";

// This file contains the logic for the base grid of Suspendors
// that includes all the .container, .row, .col and .vol
// and all derivatives of those classes (-bp-x) as well as
// classes strictly necessary to define spacing in the
// flexbox made with the grid



// STUB - Container

%container-base{
    display: block;
    width: 100%;
    overflow-x: hidden;
    margin-left: auto;
    margin-right: auto;
}

%container-solid-base{
    max-width: $root-container-shift-width;
}

@if $grid-as-class {    
    .#{$container-name}{
        @extend %container-base;
        max-width: 100vw;
    }
      
    .#{$container-name}-#{$container-solid-name}, .#{$container-name}-#{$container-shift-name}{ 
        @extend %container-base; 
        max-width: #{map.get($container-solid-map, 'xxl')};
    }
   
    @each $break, $screen in $breakpoint-map-ref{
        .#{$container-name}-#{$break}{ 
            @extend %container-base;
            max-width: map.get($container-solid-map, $break);
        }
    }

    @each $break, $screen in reverse-breakpoints($breakpoint-map){
        .#{$container-name}-#{$break}-#{$container-solid-name}{
            @extend %container-solid-base;
            @extend %container-base;
        }
        .#{$container-name}-#{$break}-#{$container-shift-name}{
            @extend %container-base;
        }
        @media (min-width: $screen) {
            .#{$container-name}-#{$break}-#{$container-solid-name}{
                max-width: #{map.get($container-solid-map, $break)};
            }
            .#{$container-name}-solid, .#{$container-name}-#{$container-shift-name}{
                max-width: #{map.get($container-solid-map, $break)};
            }
            .#{$container-name}-#{$break}-#{$container-shift-name}{
                max-width: $root-container-shift-width;
            }
        }
    }
}

@if $grid-as-tag {

    #{$prefix}-#{$container-name}{
        @extend %container-base;
        max-width: 100vw;

        @each $break, $screen in $breakpoint-map-ref{
            &[#{$break}]{
                max-width: map.get($container-solid-map, $break);
            }
        }
    }  

    #{$prefix}-#{$container-name}-#{$container-solid-name} { 
        @extend %container-base; 
        width: $root-container-shift-width;
        max-width: #{map.get($container-solid-map, 'xxl')};

        @each $break, $screen in reverse-breakpoints($breakpoint-map){
            @media (min-width: $screen) {
                &[#{$break}]{
                    max-width: #{map.get($container-solid-map, $break)};
                }
            }
        }
    }

    #{$prefix}-#{$container-name}-#{$container-shift-name} { 
        @extend %container-base; 
        width: 100%;
        max-width: #{map.get($container-solid-map, 'xxl')};
        
        @each $break, $screen in reverse-breakpoints($breakpoint-map){
            @media (min-width: $screen) {
                &[#{$break}]{
                    max-width: $root-container-shift-width;
                }
            }
        }
    }
}

@each $break, $screen in reverse-breakpoints($breakpoint-map){
    @media (min-width: $screen) {
        :root{
            --#{$prefix}-container-shift-width: #{map.get($container-solid-map, $break)};
        }
    }
}

// STUB - Col

%col-extend {
    --width: 100%;
    width: var(--width);
    display: block;
}

@if $grid-as-class {    
    .#{$column-name}{
        @extend %col-extend;
    }
}

@if $grid-as-tag {        
    #{$prefix}-#{$column-name}{
        @extend %col-extend;
    }
}

@if $grid-as-class {    
    @each $break, $screen in $breakpoint-map-ref{
        @each $name, $width in $col-map{
            .#{$column-name}-#{$break}-#{$name}{ 
                @extend %col-extend;
             }
        }
    }
}

@if $grid-as-class {
    @each $name, $width in $col-map{
        .#{$column-name}-#{$name}, .cols-#{$name} .#{$column-name}{
            --width: #{$width};
            width: var(--width); 
        }
    }
}

@if $grid-as-tag{
    @each $name, $width in $col-map{
        #{$prefix}-#{$column-name}-#{$name}, *[cols-#{$name}] >#{$prefix}-#{$column-name}{
            display: block;
            --width: #{$width};
            width: var(--width); 
        }
    }
}

@if $grid-as-class {    
    @each $break, $screen in $breakpoint-map-ref{
        @media screen and (#{$minmax}: $screen){
            @each $name, $width in $col-map{
                .#{$column-name}-#{$break}-#{$name}, .cols-#{$break}-#{$name} .#{$column-name}{ 
                    --width: #{$width};
                    width: var(--width); 
                }
            }
        }
    }
}

@if $grid-as-tag{
    @each $break, $screen in $breakpoint-map-ref{
        @media screen and (#{$minmax}: $screen){
            #{$prefix}-#{$column-name}-1, #{$prefix}-#{$column-name}-2, #{$prefix}-#{$column-name}-3, #{$prefix}-#{$column-name}-4, #{$prefix}-#{$column-name}-5, #{$prefix}-#{$column-name}-6, #{$prefix}-#{$column-name}-7, #{$prefix}-#{$column-name}-8, #{$prefix}-#{$column-name}-9, #{$prefix}-#{$column-name}-10, #{$prefix}-#{$column-name}-11, #{$prefix}-#{$column-name}-12, #{$prefix}-#{$column-name}{
                @each $name, $width in $col-map{
                    &[#{$break}-#{$name}]{ 
                        --width: #{$width};
                    }
                }
            }
            @each $name, $width in $col-map{
                *[cols-#{$break}-#{$name}] >#{$prefix}-#{$column-name}{ 
                    --width: #{$width};
                }
            }
        }
    }
}

@if $grid-as-class {
    .col-fill{
        width: 0;
        flex-grow: 1;
    }
    @each $break, $screen in $breakpoint-map-ref{
        @media screen and (#{$minmax}: $screen){
            @each $name, $width in $col-map{
                .col-#{$break}-fill{ 
                    width: 0;
                    flex-grow: 1;
                }
            }
        }
    }
}

@if $grid-as-tag {
    #{$prefix}-#{$column-name}-fill{
        width: 0;
        flex-grow: 1;
    }
    @each $break, $screen in $breakpoint-map-ref{
        @media screen and (#{$minmax}: $screen){
            #{$prefix}-#{$column-name}-1, #{$prefix}-#{$column-name}-2, #{$prefix}-#{$column-name}-3, #{$prefix}-#{$column-name}-4, #{$prefix}-#{$column-name}-5, #{$prefix}-#{$column-name}-6, #{$prefix}-#{$column-name}-7, #{$prefix}-#{$column-name}-8, #{$prefix}-#{$column-name}-9, #{$prefix}-#{$column-name}-10, #{$prefix}-#{$column-name}-11, #{$prefix}-#{$column-name}-12, #{$prefix}-#{$column-name}{
                @each $name, $width in $col-map{
                    &[col-#{$break}-fill]{ 
                        width: 0;
                        flex-grow: 1;
                    }
                }
            }
        }
    }
}

// STUB - Row

@if $grid-as-class{
    .row{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        &.flex-col{ flex-direction: column;}
    }
}

@if $grid-as-tag{
    #{$prefix}-row{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        &[flex-col]{ flex-direction: column;}
    }
}
    

// STUB - Vol
// NOTE
// because of how useful volume is outside of the grid, I made it so that it can be used
// both as a parameter on a custom element, a data-vol custom parameter as well as a class

@each $key, $value in $vol-map { 
    *[vol-#{$key}], *[data-vol-#{$key}], .vol-#{$key} { 
        height: $value;
    }
}
 
// Breakpoints
@each $break, $screen in $breakpoint-map-ref {
    @media (#{$minmax}: $screen){
        @each $k2, $v2 in $vol-map { 
            *[vol-#{$break}-#{$k2}], *[data-vol-#{$break}-#{$k2}], .vol-#{$break}-#{$k2} { 
                height: $v2;
            }
        }
    }
}
