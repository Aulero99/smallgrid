@import "../var/_variables.scss";
@import "../var/_variable-maps.scss";
@import "./_units.scss";

// This file contains the logic for the base grid of Suspendors
// that includes all the .container, .row, .col and .vol
// and all derivatives of those classes (-bp-x) as well as
// classes strictly necessary to define spacing in the
// flexbox made with the grid


// STUB - Container
.container{
    display: block;
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
    margin-left: auto;
    margin-right: auto;
}

@each $break, $screen in $breakpoint-map{
    .container-#{$break}{ 
        @extend .container;
        max-width: $screen;
    }
}

// STUB - Col

.col-fill{
    width: 0;
    flex-grow: 1;
}

// NOTE this class is used to remove compilation errors from extension, and
// reduces compilation size by about 7-12k
%col-extend{
    --width: 100%;
    width: var(--width);
}

.col{
    --width: 100%;
    @extend %col-extend;
}

@each $break, $screen in $breakpoint-map{
    @each $name, $width in $col-map{
        .col-#{$break}-#{$name}{ 
            @extend %col-extend;
         }
    }
}

@each $name, $width in $col-map{
    .col-#{$name}, .cols-#{$name} .col{
        --width: #{$width};
        width: var(--width); 
    }
}

@each $break, $screen in $breakpoint-map{
    @media (#{$minmax}: $screen){
        @each $name, $width in $col-map{
            .col-#{$break}-#{$name}, .cols-#{$break}-#{$name} .col{ 
                --width: #{$width};
                width: var(--width); 
            }
        }
    }
}

// STUB - Row

.row{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    
    &.flex-col{ flex-direction: column;}
}

.d-flex,.flex-row,.flex-col{ display: flex; }
.d-none{ display: none; }
.d-block{ display: block; }

.flex-row{
    flex-direction: row;
    .wrap{ flex-wrap: wrap; }
}
.flex-col{
    flex-direction: column;
    .wrap{ flex-wrap: wrap; }
}

@each $break, $screen in $breakpoint-map{
    @media (#{$minmax}: $screen){
        .d-#{$break}-none{ display: none; }
        .d-#{$break}-flex,.flex-#{$break}-row,.flex-#{$break}-col{ display: flex; }
        .d-#{$break}-block{ display: block; }
        .flex-#{$break}-row{
            flex-direction: row;
            .wrap{ flex-wrap: wrap; }
        }
        .flex-#{$break}-col{
            flex-direction: column;
            .wrap{ flex-wrap: wrap; }
        }
        .grow-#{$break}-1{ flex-grow: 1; }
        .fill-#{$break} { flex-grow: 1; }
        .fill-#{$break}-x,.fill-#{$break}{ width: 100%; }
        .fill-#{$break}-y,.fill-#{$break}{ height: 100%; }
    }
}

.align-start{
    align-items: flex-start;
    align-content: flex-start;
}
.align-center{
    align-items: center;
    align-content: center;
}
.align-end{
    align-items: flex-end;
    align-content: flex-end;
}
.align-between{
    align-content: space-between;
    align-items: space-between;
}
.align-around{
    align-content: space-around;
    align-items: space-around;
}
.align-even{
    align-content: space-evenly;
    align-items: space-evenly;
}
.justify-start{
    justify-content: flex-start;
    justify-items: flex-start;
}
.justify-center{
    justify-content: center;
    justify-items: center;
}
.justify-end{
    justify-content: flex-end;
    justify-items: flex-end;
}
.justify-between{
    justify-content: space-between;
    justify-items: space-between;
}
.justify-around{
    justify-content: space-around;
    justify-items: space-around;
}
.justify-even{
    justify-content: space-evenly;
    justify-items: space-evenly;
}

@each $break, $screen in $breakpoint-map{
    @media (#{$minmax}: $screen){
        .align-#{$break}-start{
            align-items: flex-start;
            align-content: flex-start;
        }
        .align-#{$break}-center{
            align-items: center;
            align-content: center;
        }
        .align-#{$break}-end{
            align-items: flex-end;
            align-content: flex-end;
        }
        .align-#{$break}-between{
            align-content: space-between;
            align-items: space-between;
        }
        .align-#{$break}-around{
            align-content: space-around;
            align-items: space-around;
        }
        .align-#{$break}-even{
            align-content: space-evenly;
            align-items: space-evenly;
        }
        .justify-#{$break}-start{
            justify-content: flex-start;
            justify-items: flex-start;
        }
        .justify-#{$break}-center{
            justify-content: center;
            justify-items: center;
        }
        .justify-#{$break}-end{
            justify-content: flex-end;
            justify-items: flex-end;
        }
        .justify-#{$break}-between{
            justify-content: space-between;
            justify-items: space-between;
        }
        .justify-#{$break}-around{
            justify-content: space-around;
            justify-items: space-around;
        }
        .justify-#{$break}-even{
            justify-content: space-evenly;
            justify-items: space-evenly;
        }
    }
}

// STUB Vol

// standard screen variable styles
@each $key, $value in $vol-map { 
    .vol-#{$key} { 
        height: vol($value);
    }
}
// Breakpoint Logic
@each $break, $screen in $breakpoint-map {
    @media (#{$minmax}: $screen){
        @each $k2, $v2 in $vol-map { 
            .vol-#{$break}-#{$k2} { 
                height: vol($v2);
            }
        }
    }
}